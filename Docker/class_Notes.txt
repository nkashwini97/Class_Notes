########################
Day 20 : 13th May. 2025
########################


	Containerization using Docker!
	
	
	DevOps Stages ::
	
		- Continuous Development, Continuous Integration, Continuous Testing 
		
		- Continuous Delivery/Deployment 		==> Prod Release 
		
		
	CI/CD Pipeline - Workflow ::: ==> Non-Containerized Applications
	
		SCM_Checkout 
		Application Build 
		Unit Testing 
		Create Artifacts 
		Promote the Application Artifacts to Test Environments and till Prod Environment
		Notify 
	
	Containerization : 
	
		=> Is a process of packaging the application along with its dependencies.
		
	Virtual Machines :
	
		- VMs are considered as Hardware Level Virtualization 
		- VMs are created using Hypervisor
		- VMs are used to Execute Operating System 
		- VMs continue to run even if there is no active application/task
		- VMs consume more space and time to start any application/task.
		
	Containers :
	
		- Containers are considered as OS-Level Virtualization 
		- Containers are created using Container Engine
		- Containers are used to Execute application/task, Not Operating System 
		- Containers will immediately go to Exit State if there is no active application/task
		- Containers consume less space and time to start any application/task.
		
			- Namespace and Control Groups are the core (Kernel) components of Operating System 
					- With this Containers run in a dedicated/Isolated address space.		
	
		- Container are used to reduce the no. of VMs 
		
		=> Containerization - Is a process of packaging the application along with its dependencies.

	
	Scenarios :
	
	Infra-Structure Perspectives :  Infra-Structure Management Team :

		Jenkins_Master(VM) ==> To Create Jenkins CI/CD Pipeline Jobs/Projects and schedule to run in Jenkins SlaveNodes
								--> Install : git, jdk, jenkins
								
			Jenkins_SlaveNode1(VM)	==> Perform Java Application Builds --> git, jdk, maven 
			Jenkins_SlaveNode1.1(VM)==> Perform Java Application Builds --> git, jdk, maven
			Jenkins_SlaveNode2(VM)	==> Perform .Net Application Builds --> git, .Net SDK
			Jenkins_SlaveNode3(VM)	==> Perform Python Application Builds --> git, Python
			Jenkins_SlaveNode4(VM)	==> Perform Python Application Builds --> git, Angular
			Jenkins_SlaveNode5(VM)	==> Perform Python Application Builds --> git, NodeJS
			Jenkins_SlaveNode6(VM)	==> Perform Python Application Builds --> git, Ruby			
		
		Using => Containerization  ::
	
		Jenkins_Master(VM) ==> To Create Jenkins CI/CD Pipeline Jobs/Projects and schedule to run in Jenkins SlaveNodes
								--> Install : git, jdk, jenkins
								
				Jenkins_SlaveNode1(VM)	
					- Install Container Engine (Docker) 
					
							C1	==> Perform  git, jdk, maven 
							C2  ==> Perform  git, jdk, maven
							C3  ==> Perform  git, .Net SDK
							C4  ==> Perform  git, Python
							C5  ==> Perform  git, Angular
							C6  ==> Perform  git, NodeJS
							C7  ==> Perform  git, Ruby		
	
	
	Development/Deployment Perspectives :
	
		CI/CD Pipeline - Workflow ::: ==> Non-Containerized Applications

			SCM_Checkout 
			Application Build 
			Unit Testing 
			Create Artifacts 
			Promote the Application Artifacts to Test Environments and till Prod Environment
			Notify

		Environments :
		
			Dev 			
			Build 	==> mywebapp.war 	-- jdk17,tomcat8 --> execute 			
			
			QA 		==> mywebapp.war	-- jdk17,tomcat8 --> execute
			
			UAT 	==> mywebapp.war	-- jdk17,tomcat8 --> execute
			
			Prod	==> mywebapp.war	-- jdk17,tomcat8 --> execute 
	
		Using Containerization :
		
		=> Containerization - Is a process of packaging the application along with its dependencies.

		
		Dev 		
		Build 	==>	mywebapp-svc1.war 	-- jdk17,tomcat8 --> execute 	--> Perform Unit Testing 
		
			Create an Application Package/Image --> (mywebapp-svc1.war,jdk17,tomcat8) ==> mywebapp-svc1_Image:v1.0
		
			Save the Application Package/Image in the Container Registry/Repositories
		
		QA 		==> Download/Pull that mywebapp-svc1_Image:v1.0 & Create Application containers
		
		UAT 	==> Download/Pull that mywebapp-svc1_Image:v1.0 & Create Application containers
		
		Prod	==> Download/Pull that mywebapp-svc1_Image:v1.0 & Create Application containers
	

	Terminologies :::
	
		Container Engine 
			-- Is used to Create/Manage Container Images and Create/Manage and run Containers	
		
		Container Images 
			--	Is a Static file that defined the properties of the Container and its dependencies 
			--  Container Images are Non-Executables
			--  Container Images are composed of various Layers created using the Dockerfile Instructions
			
		Containers 
			--	Containers are the executable units of Container Images
			-- 	Containers are used to run the applications defined in the Container Images 		
		
		Container Registry 
			--	It is used to save and version control the Container Images 
				Dockerhub is Container Registry to be used.
				https://hub.docker.com/			
		
		Container Repositories
			--	Container Repositories are the subset of Container Registry
			
			github 			Docker-Hub_Registry
				repo1			Docker-hub_Repository1
				repo2			Docker-hub_Repository2	
	
	

Working with DockerHub :	


Install docker Container Engine in Local Machine :

	-> Install Docker in existing Jenkin_Slave Node
	-> apt install docker.io -y				# https://docs.docker.com/engine/install/
	
Working Docker CLI Commands :


	-> docker --version 
	
	-> docker images 			# List the docker images in the machine 
	
	-> docker ps 				# List the active/running Containers in the machine 

	-> docker ps -a 			# List of all the active/stopped Containers in the machine 
	
	

	
########################
Day 21 : 14th May. 2025
########################	


• Introduction to Virtualization and Containerization
• What is Containerization
• Docker Architecture
• Overview of Docker Hub
• Docker Installation
• Docker Commands
• Container Modes
• Port Binding
• Docker file
• Managing Docker Images
• Running and Managing Containers
• Docker Volume
• Docker Compose
• Overview of Docker Swarm

	Docker CLI Commands :
	
		- Create Containers 
		- Work with Containers 

	-> docker --version 
	
	-> docker images 				# List the docker images in the machine 
	
	-> docker ps 					# List the active/running Containers in the machine 

	-> docker ps -a 				# List of all the active/stopped Containers in the machine 	
	
	-> docker pull <image_name>		# To download the Container Image from DockerHub
	
		Eg.: docker pull alpine
		
			 docker pull centos 
			 
			 docker pull ubuntu 
			 
			 docker pull tomcat
			 
	- docker run <image_name>		# Create and execute a Container based on a image name
	
	Three Modes of Container Execution :
	Container Execution Modes ::
	
		- Foreground / Attached Mode 		# Default Mode 
		
				docker run <image_name> 
				
				Eg.: 					
					docker run alpine sleep 30
		
		- Background / Detached Mode 
			
				docker run -d <image_name> 
				Eg.: 				
					docker run -d alpine sleep 30	
		
		- Interactive Mode 
		
				docker run -it <image_name> 
				Eg.: 
				
					docker run -it alpine sh 		

					docker run -it ubuntu sh 	

	- docker start <Container_ID>		# Start a container
	
		Eg.: 
		
			docker start ab85d99cbd20
			
	- docker exec -it <Container_ID> bash		# Login to a running container
	
		Eg.: 
			docker exec -it ab85d99cbd20 bash
			
			exit								# Logoff from Container
			
			
	- docker stop <Container_ID> 
	
		Eg.: 
			docker stop ab85d99cbd20


	- Port Mapping :

	Port Mapping / Port Binding ::::
	
		- It is used to expose the container to access thru internet 
		
		- It is a process of mapping the container port with the host port.
	
	Run Application inside the Container!
	
		docker run -it tomcat:8.0 bash
		
		docker run -it -p <host_Port>:<container_Port> tomcat:8.0
		
		Eg:
		
		docker run -it -p 8089:8080 tomcat:8.0
	
		-p <host_Port>:<container_Port>
		
		
				http://15.207.117.184:8089/	
